// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User model with role-based access
model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String?
  role         UserRole  @default(public)
  organization String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  alerts       Alert[]

  @@map("users")
}

// Disease reports submitted by the public (supports multiple disease types)
model Report {
  id           String      @id @default(uuid())
  reporterName String
  reporterNumber String
  latitude     Float
  longitude    Float
  locationId   String?     @map("location_id")
  barangayId   String?     @map("barangay_id")
  diseaseId    String      @map("disease_id")
  symptoms     Json        // Stored as JSON array of symptom IDs
  reportDate   DateTime    @default(now()) @map("report_date")
  status       ReportStatus @default(pending)
  notes        String?     @db.Text
  validatedBy  String?     @map("validated_by")
  validatedAt  DateTime?   @map("validated_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // Relations
  barangay     Barangay?   @relation(fields: [barangayId], references: [id])
  disease      Disease     @relation(fields: [diseaseId], references: [id])

  @@map("reports")
}

// Barangay/district administrative areas
model Barangay {
  id           String    @id @default(uuid())
  name         String
  // Using raw string for geometry as Prisma doesn't natively support spatial types
  geometry     String    @db.Text // Store as GeoJSON text
  
  // Relations
  reports      Report[]
  
  @@map("barangays")
}

// Disease types (Communicable and Non-Communicable diseases)
model Disease {
  id           String      @id @default(uuid())
  name         String      @unique
  category     DiseaseCategory
  description  String?     @db.Text
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // Relations
  reports      Report[]
  symptoms     DiseaseSymptom[]
  
  @@map("diseases")
}

// Symptoms that can be associated with diseases
model Symptom {
  id           String      @id @default(uuid())
  name         String      @unique
  description  String?     @db.Text
  severity     SymptomSeverity @default(mild)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // Relations
  diseases     DiseaseSymptom[]
  
  @@map("symptoms")
}

// Junction table for Disease-Symptom many-to-many relationship
model DiseaseSymptom {
  id           String      @id @default(uuid())
  diseaseId    String      @map("disease_id")
  symptomId    String      @map("symptom_id")
  isCommon     Boolean     @default(false) @map("is_common") // Mark common symptoms for UI priority
  severity     SymptomSeverity @default(mild) // Disease-specific severity
  createdAt    DateTime    @default(now()) @map("created_at")
  
  // Relations
  disease      Disease     @relation(fields: [diseaseId], references: [id], onDelete: Cascade)
  symptom      Symptom     @relation(fields: [symptomId], references: [id], onDelete: Cascade)
  
  @@unique([diseaseId, symptomId])
  @@map("disease_symptoms")
}

// Hotspots generated from aggregated reports
model Hotspot {
  id             String    @id @default(uuid())
  latitude       Float
  longitude      Float
  intensity      Float
  reportCount    Int       @map("report_count")
  lastReportDate DateTime  @map("last_report_date")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("hotspots")
}

// Alerts for health officials and public
model Alert {
  id        String      @id @default(uuid())
  title     String
  message   String      @db.Text
  severity  AlertSeverity
  areaType  AreaType    @map("area_type")
  coordinates Json      // GeoJSON for area
  createdBy String      @map("created_by")
  createdAt DateTime    @default(now()) @map("created_at")
  expiresAt DateTime?   @map("expires_at")
  isActive  Boolean     @default(true) @map("is_active")
  
  // Relations
  user      User        @relation(fields: [createdBy], references: [id])

  @@map("alerts")
}

// Enums
enum UserRole {
  admin
  health_worker
  researcher
  public
}

enum ReportStatus {
  pending
  validated
  rejected
}

enum AlertSeverity {
  info
  warning
  critical
}

enum AreaType {
  point
  polygon
}

enum DiseaseCategory {
  communicable
  non_communicable
}

enum SymptomSeverity {
  mild
  moderate
  severe
  critical
}
